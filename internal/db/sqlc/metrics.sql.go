// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: metrics.sql

package db

import (
	"context"
	"database/sql"
)

const getAllMetrics = `-- name: GetAllMetrics :many
SELECT id, type, value, delta FROM metrics
`

func (q *Queries) GetAllMetrics(ctx context.Context) ([]Metric, error) {
	rows, err := q.db.QueryContext(ctx, getAllMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metric
	for rows.Next() {
		var i Metric
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Value,
			&i.Delta,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMetric = `-- name: GetMetric :one
SELECT id, type, value, delta FROM metrics WHERE id = $1
`

func (q *Queries) GetMetric(ctx context.Context, id string) (Metric, error) {
	row := q.db.QueryRowContext(ctx, getMetric, id)
	var i Metric
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.Delta,
	)
	return i, err
}

const insertOrUpdateMetric = `-- name: InsertOrUpdateMetric :exec
INSERT INTO metrics (id, type, value, delta)
VALUES ($1, $2, $3, $4)
ON CONFLICT (id) DO UPDATE 
SET value = EXCLUDED.value, delta = EXCLUDED.delta
`

type InsertOrUpdateMetricParams struct {
	ID    string
	Type  string
	Value sql.NullFloat64
	Delta sql.NullInt64
}

func (q *Queries) InsertOrUpdateMetric(ctx context.Context, arg InsertOrUpdateMetricParams) error {
	_, err := q.db.ExecContext(ctx, insertOrUpdateMetric,
		arg.ID,
		arg.Type,
		arg.Value,
		arg.Delta,
	)
	return err
}
